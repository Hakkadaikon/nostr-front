import { Event as NostrEvent } from 'nostr-tools';
import { useNotificationStore } from '../../../stores/notification.store';
import { Notification, NotificationType } from '../../../types/notification';
import { fetchProfileForNotification } from '../../profile/services/profile-cache';

export class NostrNotificationService {
  private userPubkey: string | null = null;

  setUserPubkey(pubkey: string) {
    this.userPubkey = pubkey;
  }

  async processEvent(event: NostrEvent) {
    if (!this.userPubkey) return;

    // „Ç§„Éô„É≥„Éà„ÅÆÁ®ÆÈ°û„Å´Âøú„Åò„Å¶ÈÄöÁü•„ÇíÁîüÊàê
    switch (event.kind) {
      case 1: // „ÉÜ„Ç≠„Çπ„Éà„Éé„Éº„Éà
        await this.processTextNote(event);
        break;
      case 3: // „Ç≥„É≥„Çø„ÇØ„Éà„É™„Çπ„ÉàÔºà„Éï„Ç©„É≠„ÉºÔºâ
        await this.processContactList(event);
        break;
      case 6: // „É™„Éù„Çπ„Éà
        await this.processRepost(event);
        break;
      case 7: // „É™„Ç¢„ÇØ„Ç∑„Éß„É≥Ôºà„ÅÑ„ÅÑ„Å≠Ôºâ
        await this.processReaction(event);
        break;
      case 9735: // Zap
        await this.processZap(event);
        break;
    }
  }

  private async processTextNote(event: NostrEvent) {
    if (!this.userPubkey) return;

    // „É°„É≥„Ç∑„Éß„É≥Ê§úÂá∫ - Ë§áÊï∞„ÅÆÂΩ¢Âºè„Çí„Çµ„Éù„Éº„Éà
    let isMention = false;

    // 1. #[Êï∞Â≠ó] ÂΩ¢Âºè„ÅÆ„É°„É≥„Ç∑„Éß„É≥Ê§úÂá∫
    const mentionRegex = /#\[(\d+)\]/g;
    const mentions = event.content.matchAll(mentionRegex);
    
    for (const match of mentions) {
      const tagIndex = parseInt(match[1]);
      const tag = event.tags[tagIndex];
      
      if (tag && tag[0] === 'p' && tag[1] === this.userPubkey) {
        isMention = true;
        break;
      }
    }

    // 2. p„Çø„Ç∞„ÅßÁõ¥Êé•„É°„É≥„Ç∑„Éß„É≥„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    if (!isMention) {
      const pTags = event.tags.filter(tag => 
        tag[0] === 'p' && tag[1] === this.userPubkey
      );
      if (pTags.length > 0) {
        isMention = true;
      }
    }

    // 3. @npub... „ÇÑ nostr:npub... ÂΩ¢Âºè„ÅÆ„É°„É≥„Ç∑„Éß„É≥Ê§úÂá∫
    if (!isMention && this.userPubkey) {
      try {
        const { nip19 } = await import('nostr-tools');
        const userNpub = nip19.npubEncode(this.userPubkey);
        
        // @npub... „Åæ„Åü„ÅØ nostr:npub... „Éë„Çø„Éº„É≥„ÇíÊ§úÂá∫
        const npubPattern = new RegExp(`(@|nostr:)${userNpub}`, 'i');
        if (npubPattern.test(event.content)) {
          isMention = true;
        }
      } catch (error) {
        console.error('Error encoding npub:', error);
      }
    }

    // „É°„É≥„Ç∑„Éß„É≥ÈÄöÁü•„Çí‰ΩúÊàê
    if (isMention) {
      await this.createNotification({
        type: 'mention',
        event,
        content: event.content,
      });
      return;
    }

    // Ëøî‰ø°Ê§úÂá∫
    const replyTags = event.tags.filter(tag => 
      tag[0] === 'e' && tag[3] === 'reply'
    );
    
    if (replyTags.length > 0) {
      // „Åì„ÅÆÊäïÁ®ø„ÅåËá™ÂàÜ„ÅÆÊäïÁ®ø„Å∏„ÅÆËøî‰ø°„Åã„ÉÅ„Çß„ÉÉ„ÇØ„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã
      // „Åì„Åì„Åß„ÅØÁ∞°Áï•Âåñ„ÅÆ„Åü„ÇÅ„ÄÅp„Çø„Ç∞„ÅßËá™ÂàÜ„Åå„Çø„Ç∞‰ªò„Åë„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
      const pTags = event.tags.filter(tag => 
        tag[0] === 'p' && tag[1] === this.userPubkey
      );
      
      if (pTags.length > 0) {
        await this.createNotification({
          type: 'reply',
          event,
          content: event.content,
        });
      }
    }
  }

  private async processContactList(event: NostrEvent) {
    if (!this.userPubkey) return;

    // „Éï„Ç©„É≠„ÉºÊ§úÂá∫
    const pTags = event.tags.filter(tag => 
      tag[0] === 'p' && tag[1] === this.userPubkey
    );
    
    if (pTags.length > 0) {
      await this.createNotification({
        type: 'follow',
        event,
      });
    }
  }

  private async processRepost(event: NostrEvent) {
    if (!this.userPubkey) return;

    // „É™„Éù„Çπ„Éà„Åï„Çå„ÅüÊäïÁ®ø„ÅÆID„ÇíÂèñÂæó
    const eTags = event.tags.filter(tag => tag[0] === 'e');
    const pTags = event.tags.filter(tag => 
      tag[0] === 'p' && tag[1] === this.userPubkey
    );
    
    if (pTags.length > 0 && eTags.length > 0) {
      await this.createNotification({
        type: 'repost',
        event,
        postId: eTags[0][1],
      });
    }
  }

  private async processReaction(event: NostrEvent) {
    if (!this.userPubkey) return;

    // „ÅÑ„ÅÑ„Å≠Ê§úÂá∫Ôºà+„É™„Ç¢„ÇØ„Ç∑„Éß„É≥Ôºâ
    if (event.content === '+' || event.content === 'üëç') {
      const pTags = event.tags.filter(tag => 
        tag[0] === 'p' && tag[1] === this.userPubkey
      );
      
      if (pTags.length > 0) {
        const eTags = event.tags.filter(tag => tag[0] === 'e');
        await this.createNotification({
          type: 'like',
          event,
          postId: eTags[0]?.[1],
        });
      }
    }
  }

  private async processZap(event: NostrEvent) {
    if (!this.userPubkey) return;

    // Zap„Ç§„Éô„É≥„Éà„ÅÆÂá¶ÁêÜÔºàÁ∞°Áï•ÂåñÔºâ
    const pTags = event.tags.filter(tag => 
      tag[0] === 'p' && tag[1] === this.userPubkey
    );
    
    if (pTags.length > 0) {
      // ÈáëÈ°ç„ÅÆÊäΩÂá∫ÔºàÂÆüÈöõ„ÅÆZap„Ç§„Éô„É≥„Éà„Åß„ÅØ„Çà„ÇäË§áÈõë„Å™Âá¶ÁêÜ„ÅåÂøÖË¶ÅÔºâ
      const amountTag = event.tags.find(tag => tag[0] === 'amount');
      const amount = amountTag ? parseInt(amountTag[1]) : 1000;
      
      await this.createNotification({
        type: 'zap',
        event,
        amount,
      });
    }
  }

  private async createNotification({
    type,
    event,
    content,
    postId,
    postContent,
    amount,
  }: {
    type: NotificationType;
    event: NostrEvent;
    content?: string;
    postId?: string;
    postContent?: string;
    amount?: number;
  }) {
    // „Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†±„ÇíÂèñÂæó
    const user = await fetchProfileForNotification(event.pubkey);
    
    const notification: Notification = {
      id: `${event.id}-${type}`,
      type,
      user,
      content,
      postId,
      postContent,
      amount,
      isRead: false,
      createdAt: new Date(event.created_at * 1000),
    };

    useNotificationStore.getState().addNotification(notification);
  }
}

export const nostrNotificationService = new NostrNotificationService();